Rendering Concepts:

Рендиране означава динамично генериране на съдържание
За разлика от статични HTML файлове
Могат да бъдат части от уеб страница или цяло уеб приложение
Почти всички съвременни сайтове използват динамично генериране
Може да се извършва на сървъра и на клиента (браузър)

От страната на сървъра
Потребителят изпраща заявка
Сървърът генерира HTML
HTML се изпраща на клиента
Браузърът интерпретира HTML

От страна на клиента
Потребителят изпраща заявка
CDN обслужва файлове и JS
JS извлича данни
JS генерира DOM елементи

Ползи:
Страницата никога не се презарежда и взаимодействието е мигновено
Състояние и данни могат да се споделят между изгледи
След стартиране трябва да се извлича само динамично съдържание
Недостатъци:
По-дълги първоначални времена на зареждане
Не е подходящ за SEO
Лоша производителност с бавни клиентски машини

What is Templating?
Шаблоните позволяват подобно съдържание да бъде копирано в уеб страница, без да се повтаря съответното маркиране навсякъде
На сървъра се използват шаблони за генериране на HTML
Например, съдържание от база данни се вмъква в контейнери
На клиента шаблоните се използват за създаване на DOM елементи
Шаблонът определя структурата на изглед
Съдържанието се извлича от REST услуга
Структурата се пресъздава и попълва с данните
За рационализиране на процеса се използва машина за шаблони

Templating Benefits
Производителност – избягвайте повтарянето на маркирането
Спестете честотна лента – извличайте само динамичното съдържание
Компонентност – повторно използване на елементи на множество страници
Разделяне на опасенията – отделни възгледи от логиката
Интерактивност – незабавна обратна връзка с потребителя

Шаблоните трябва да са възможно най-прости
Не пишете бизнес логика в шаблоните
Следвайте принципите на функционалното програмиране
Шаблоните са основно чисти функции

Машината за шаблони обикновено позволява:
Шаблоните да се дефинират във файлове, отделно от бизнес логиката
Да се използва синтаксис на маркиране, близък до HTML
Стойности, които да бъдат вмъкнати чрез контекст на изобразяване
Шаблони, които трябва да бъдат съставени за създаване на оформления
Допълнителни функции на някои библиотеки:
Кеширане на резултати от шаблони
Автоматизиране на проверка на разликата и частични актуализации

What is lit-html?
lit-html е ефективна, експресивна библиотека за шаблони

let sayHello = (name) => html`<h1>Hello ${name}</h1>`;
render(sayHello('World'), document.body);

Част от проекта Polymer
Позволява изобразяване и частично актуализиране на шаблони
Използва стандартен JavaScript и HTML синтаксис
Може да се персонализира и разширява
Съвместим с всички основни браузъри

Инсталация:
npm install lit-html

Импорт:
<script type="module">
  import { html, render } 
	from './node_modules/lit-html/lit-html.js';
  …
</script>

Използване:
const template = // Template definition
render(template(state), document.body);


// Tag Function Call
greet`I'm ${name}. I'm ${age} years old.`

----------Attribute Binding:----------
const myTemplate = (data) => html`<div 	class=${data.cssClass}>Stylish text.</div>`


---------? prefix for a boolean attribute binding:------------
const myTemplate = (data) => html`<div 	?disabled=${!data.active}>Stylish text.</div>`



--------bind to a node's JavaScript properties :---------

const myTemplate = (data) => html`<input 	.value=${data.value}></input>`;


------------Handling Events:---------------------

const appRootTemplate = (ctx) => html`
    <div>
        <h1 @click=${ctx.handleClick}>${ctx.title}</h1>
    </div>
`
-------------Conditional Statements:------------
html`
  ${user.isloggedIn
      ? html`Welcome ${user.name}`
      : html`Please log in`
  }
`;


--------------List Rendering--------------

html`
  <ul>
    ${items.map((item) => html`<li>${item}</li>`)}
  </ul>
`;
