
Component Approach:
Компонентите са често срещана тема сред съвременните рамки и библиотеки
Фокусиран върху разделянето на проблемите и възможността за съставяне:
Комбинирайте представяне, стил и бизнес логика в едно цяло
Капсулирайте състоянието и контрола
Изложете само необходимите интерфейси
Отделен от околната среда (чрез инжектиране на зависимост)
Силно комбиниран с други компоненти


Application State:
Избягвайте да съхранявате състояние в DOM
Избягвайте да се опитвате да изведете състояние от DOM
Например, използване на текстовото съдържание на HTML елемент, за да реконструирате как изглежда запис в базата данни
Опитайте се да напишете декларативна DOM логика:
Опишете как трябва да изглежда DOM за дадено състояние
Когато състоянието се промени, DOM следва
Библиотеките за изобразяване позволяват ефективно преначертаване на DOM

Routing:
Опит за свързване на съдържанието на приложението с URL маршрута
Това позволява по-ефективно използване на историята на браузъра и споделяне на връзки към конкретни части на приложението
Може да се направи с пътеки, параметри на заявка или фрагменти
Примери:
Думите за търсене трябва да бъдат включени като параметри на заявката
Ако каталогът е пагиниран, включете текущата страница в URL адреса
Могат да бъдат включени и превключваемо съдържание или поднавигация

Action Feedback:

Осигурете незабавно потвърждение за действията на потребителя:
Промяна на външния вид при щракване върху връзки и бутони
Изчистете изгледа на навигацията
Показване на индикатори за зареждане по време на мрежови заявки
Деактивирайте въвеждането по време на заявки, за да предотвратите двойно подаване
Не прекалявайте с обратната връзка:
Не се опитвайте да потвърдите въвеждането, преди потребителят да е приключил
Няма нужда да показвате известия за всичко

User Input:
Винаги дезинфекцирайте въведеното от потребителя:
Премахнете празното пространство в началото и в края
Не включвайте автоматично всички данни от формуляра в заявката – изберете само свойствата, които са част от колекцията
Предотвратете вмъкването на HTML навсякъде във вашия код
Никога не използвайте eval, когато е включен потребителски вход
Не забравяйте, че предното приложение не осигурява сигурност – сървърът трябва да проверява отново всички действия на потребителя


Error Handling:

Винаги предвиждайте грешки от мрежови заявки и потребителско въвеждане
Грешките, които могат да бъдат разрешени автоматично, могат да бъдат обработени зад кулисите
Можете да ги хванете там, където се появят
Например грешки при анализиране на данни, празни отговори на сървъра и др.
Грешките, които се отнасят до действието на потребителя, трябва да бъдат разпространени в презентационния слой на приложението (повторно хвърляне или неулавяне)
Например грешки при валидиране