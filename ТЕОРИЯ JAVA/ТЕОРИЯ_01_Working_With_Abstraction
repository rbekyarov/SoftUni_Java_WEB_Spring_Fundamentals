МЕТОДИ:
Използваме методи за разделяне на кода на функционални блокове
Подобрява четимостта на кода
Позволява по-лесно отстраняване на грешки
Методите ни позволяват лесно повторно използване на код
Променяме метода веднъж, за да повлияем на всички повиквания
Един метод трябва да изпълнява една задача

КЛАСОВЕ:
Точно като методите, класовете не трябва да знаят или да правят твърде много
Можем също да разбием нашия код логически на класове
Скриване на изпълнението
Позволете ни да променим дестинацията на изхода
Помага ни да избегнем повтарянето на кода

Рефактуриране:
Преструктурира кода, без да променя поведението
Подобрява четимостта на кода
Намалява сложността
Разбиване на кода на единици за многократна употреба
Извличане на части от методи и класове в нови
Подобряване на имената на променливи, методи, класове и т.н.
Преместване на методи или полета към по-подходящи класове

ENUM:
Представете числова стойност от фиксиран набор като текст
Можем да ги използваме, за да предаваме аргументи на методи, без да правим кода объркващ


STATIC ключова дума в Java:
- static class
Клас от най-високо ниво е клас, който не е вложен клас
Вложен клас е всеки клас, чиято декларация се случва в тялото на друг клас или интерфейс
Само вложените класове могат да бъдат статични
        class TopClass {
            static class NestedStaticClass {

                }
               }
- Static Method
Принадлежи към класа, а не към обекта на клас
Може да се извиква без необходимост от създаване на екземпляр на клас
Има достъп до статичен член на данните и може да променя стойността му
Не може да използва нестатичен член на данни или да извика директно нестатичен метод
this и super не могат да се използват в статичен контекст
 - Static Block
Набор от оператори, които ще бъдат изпълнени от JVM преди изпълнението на основния метод
Изпълнението на статичен блок е в момента на зареждане на класа
Един клас може да приеме произволен брой статични блокове, но всички блокове ще се изпълняват отгоре надолу


Packages in Java:
Използва се за групиране на свързани класове
Като папка във файлова директория
Използвайте пакети, за да избегнете конфликти в имената и да напишете по-добре поддържан код
Пакетите са разделени на две категории:
Вградени пакети (пакети от Java API)
Дефинирани от потребителя пакети (създайте собствени пакети)