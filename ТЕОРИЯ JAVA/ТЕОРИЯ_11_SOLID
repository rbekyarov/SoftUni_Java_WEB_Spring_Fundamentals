SOLID:
S - Single Responsibility -клас трябва да носи само една отговорност
O - Open/Closed - отворен за разширяване, но затворен за модификация
L - Liskov substitution - обектите трябва да бъдат заменяеми с екземпляри на техните подтипове, без да се променя коректността на тази програма
I - Interface Segregation - много специфични интерфейси са по-добри от един общ интерфейс
D - Dependency Inversion - трябва да се разчита на абстракции, а не на конкретики

Single Responsibility:
Един клас трябва да носи само една отговорност
Намалява сложността на зависимостта
Всяка допълнителна отговорност е ос за промяна на класа
Все пак класовете могат да имат множество методи
Всеки метод трябва да има една функционална част от отговорността на класа


Open/Closed:
Софтуерните обекти (класове, модули, функции и т.н.) трябва да бъдат
отворен за удължаване
затворен за модификация
Кода така трябва да е проектиран, че да може да се добави нова функционалност
с минимални промени в съществуващия код

Внедряването взема предвид бъдещия растеж
Новата или модифицирана функционалност засяга малко или изобщо не засяга
вътрешната структура и потока от данни на системата

Liskov Substitution:
Производните типове трябва да бъдат напълно заменими с техните основни типове
Позоваването на основния клас може да бъде заменено с производен клас,
без да се засяга функционалността на програмния модул
Производните класове се разширяват, без да заменят функционалността на старите класове
Liskov Substitution е просто продължение на отворения затворен принцип.
Трябва да сме сигурни, че новите производни класове разширяват базовите класове,
без да променят тяхното поведение

Interface Segregation:
Клиентите не трябва да бъдат принуждавани да зависят от методи, които не използват
Разделени интерфейси
Предпочитайте малки, сплотени интерфейси
Разделете "дебели" интерфейси на "ролеви" интерфейси


Dependency Inversion:
Модулите на високо ниво не трябва да зависят от модулите на ниско ниво
И двете трябва да зависят от абстракциите
Абстракциите не трябва да зависят от детайлите
Детайлите трябва да зависят от абстракциите
Цел: разделяне между модулите чрез абстракции