Абстракцията означава игнориране на неподходящи характеристики,
свойства или функции и наблягане на съответните
на контекста на проекта, който разработваме
Абстракцията помага да се управлява сложността
Абстракцията ви позволява да се съсредоточите върху това, което прави обектът,
вместо върху това как го прави
- Interfaces (100% abstraction)
- Abstract class (0% - 100% abstraction)

Abstraction vs. Encapsulation:
-Abstraction
Процес на скриване на подробностите за внедряването и показване само на функционалност
на потребителя
Постига се с интерфейси и абстрактни класове

- Encapsulation
Използва се за скриване на кода и данните в едно устройство
за защита на данните от външния свят
Постига се с модификатори на достъп (частен, защитен, публичен)

Implements vs Extends:
Class - Extends - Class
Interface - Implements - Class
Interface - Extends - Interface

Abstract Class:
Не може да бъде инстанциран
Може да съдържа абстрактни методи
Трябва да осигури реализация за всички наследени членове на интерфейса
Внедряването на интерфейс може да преобразува методите на интерфейса в абстрактни методи

Abstract Methods:
Декларациите са разрешени само в абстрактни класове
Телата трябва да са празни (без къдрави скоби)
Декларацията на абстрактния метод не предоставя действителна имплементация:

Interfaces vs Abstract Classes:
- Интерфейс
Един клас може да имплементира няколко интерфейса
Не може да има модификатори на достъп, всичко се приема като публично
Ако добавим нов метод, трябва да проследим всички имплементации на интерфейса
и да дефинираме имплементацията за новия метод

- Абстрактен клас (AC)
Може да наследи само един абстрактен клас
Осигурява реализация и/или само подписа, който трябва да бъде отменен
Може да съдържа модификатори за достъп за полета, функции, свойства
Могат да се дефинират полета и константи
Ако добавим нов метод, имаме възможност да предоставим имплементация по подразбиране